# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: azure-vote-back
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: azure-vote-back
#   template:
#     metadata:
#       labels:
#         app: azure-vote-back
#         role: backend
#     spec:
#       containers:
#       - name: azure-vote-back
#         image: mcr.microsoft.com/oss/bitnami/redis:6.0.8
#         env:
#         - name: ALLOW_EMPTY_PASSWORD
#           value: "yes"
#         ports:
#         - containerPort: 6379
#           name: redis
# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: azure-vote-back
# spec:
#   ports:
#   - port: 6379
#   selector:
#     app: azure-vote-back
# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: azure-vote-front
# spec:
#   replicas: 3
#   selector:
#     matchLabels:
#       app: azure-vote-front
#   strategy:
#     rollingUpdate:
#       maxSurge: 1
#       maxUnavailable: 1
#   minReadySeconds: 5 
#   template:
#     metadata:
#       labels:
#         app: azure-vote-front
#         role: frontend
#     spec:
#       affinity:
#         podAntiAffinity:
#           preferredDuringSchedulingIgnoredDuringExecution:
#           - podAffinityTerm:
#               labelSelector:
#                 matchExpressions:
#                 - key: app
#                   operator: In
#                   values:
#                   - azure-vote-front
#               topologyKey: kubernetes.io/hostname
#             weight: 100
#       containers:
#       - name: azure-vote-front
#         image: mcr.microsoft.com/azuredocs/azure-vote-front:v1
#         ports:
#         - containerPort: 80
#         resources:
#           requests:
#             cpu: 250m
#           limits:
#             cpu: 500m
#         env:
#         - name: REDIS
#           value: "azure-vote-back"
# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: aks-helloworld-one  
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: aks-helloworld-one
#   template:
#     metadata:
#       labels:
#         app: aks-helloworld-one
#     spec:
#       containers:
#       - name: aks-helloworld-one
#         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
#         ports:
#         - containerPort: 80
#         env:
#         - name: TITLE
#           value: "Welcome to Azure Kubernetes Service (AKS)"
apiVersion: apps/v1
kind: Deployment
metadata:
  name: aks-helloworld-one  
spec:
  replicas: 1
  selector:
    matchLabels:
      app: aks-helloworld-one
  template:
    metadata:
      labels:
        app: aks-helloworld-one
    spec:
      containers:
      - name: aks-helloworld-one
        image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
        ports:
        - containerPort: 80
        env:
        - name: TITLE
          value: "Welcome to Azure Kubernetes Service (AKS)"
---
apiVersion: v1
kind: Service
metadata:
  name: aks-helloworld-one
  annotations:
    service.beta.kubernetes.io/azure-load-balancer-internal: "true"
    
spec:
  type: LoadBalancer
  ports:
  - port: 80
  selector:
    app: aks-helloworld-one
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: aks-helloworld-one-ingress
  namespace: ingress
  annotations:
    kubernetes.io/ingress.class: azure/application-gateway
    appgw.ingress.kubernetes.io/use-private-ip: "false"
spec:
  rules:
  -  http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: aks-helloworld-one
            port:
              number: 80
---
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: web-allow-external
spec:
  podSelector:
    matchLabels:
      role: frontend
  ingress:
  - ports:
    - port: 80
    from: []
---
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: aks-helloworld-one-policy
spec:
  podSelector:
    matchLabels:
      app: aks-helloworld-one
      role: backend
  ingress:
    - from:
      - podSelector:
          matchLabels:
            app: aks-helloworld-one